{"version":3,"file":"static/js/2383.3b67d695.chunk.js","mappings":"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","sources":["views/apps/calendar/EventData.js","views/apps/calendar/CalendarApp.js"],"sourcesContent":["const today = new Date();\r\nconst y = today.getFullYear();\r\nconst m = today.getMonth();\r\nconst d = today.getDate();\r\n\r\nconst EventData = [\r\n  {\r\n    title: 'Twice event For two Days',\r\n    allDay: true,\r\n    start: new Date(y, m, 3),\r\n    end: new Date(y, m, 5),\r\n    color: 'primary',\r\n  },\r\n  {\r\n    title: 'Learn ReactJs',\r\n    start: new Date(y, m, d + 3, 10, 30),\r\n    end: new Date(y, m, d + 3, 11, 30),\r\n    allDay: false,\r\n    color: 'success',\r\n  },\r\n  {\r\n    title: 'Launching MaterialArt Angular',\r\n    start: new Date(y, m, d + 7, 12, 0),\r\n    end: new Date(y, m, d + 7, 14, 0),\r\n    allDay: false,\r\n    color: 'danger',\r\n  },\r\n  {\r\n    title: 'Lunch with Mr.Raw',\r\n    start: new Date(y, m, d - 2),\r\n    end: new Date(y, m, d - 2),\r\n    allDay: true,\r\n    color: 'info',\r\n  },\r\n  {\r\n    title: 'Going For Party of Sahs',\r\n    start: new Date(y, m, d + 1, 19, 0),\r\n    end: new Date(y, m, d + 1, 22, 30),\r\n    allDay: false,\r\n    color: 'info',\r\n  },\r\n  {\r\n    title: 'Learn Ionic',\r\n    start: new Date(y, m, 23),\r\n    end: new Date(y, m, 25),\r\n    color: 'warning',\r\n  },\r\n  {\r\n    title: 'Research of making own Browser',\r\n    start: new Date(y, m, 19),\r\n    end: new Date(y, m, 22),\r\n    color: 'primary',\r\n  },\r\n];\r\n\r\nexport default EventData;\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Input,\r\n  Form,\r\n} from 'reactstrap';\r\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\r\nimport moment from 'moment';\r\nimport EventData from './EventData';\r\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\r\nimport './calendar.scss';\r\n\r\nmoment.locale('en-GB');\r\nconst localizer = momentLocalizer(moment);\r\n\r\nconst CalendarApp = () => {\r\n  const [calevents, setCalEvents] = useState(EventData);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [title, setTitle] = useState('');\r\n  const [slot, setSlot] = useState();\r\n  const [color, setColor] = useState('default');\r\n  const [update, setUpdate] = useState();\r\n\r\n  const ColorVariation = [\r\n    {\r\n      id: 1,\r\n      eColor: '#1a97f5',\r\n      value: 'primary',\r\n    },\r\n    {\r\n      id: 2,\r\n      eColor: '#00ab55',\r\n      value: 'success',\r\n    },\r\n    {\r\n      id: 3,\r\n      eColor: '#fc4b6c',\r\n      value: 'danger',\r\n    },\r\n    {\r\n      id: 4,\r\n      eColor: '#1e4db7',\r\n      value: 'info',\r\n    },\r\n    {\r\n      id: 5,\r\n      eColor: '#fdd43f',\r\n      value: 'warning',\r\n    },\r\n  ];\r\n  const addNewEventAlert = (slotInfo) => {\r\n    setOpen(true);\r\n    setSlot(slotInfo);\r\n  };\r\n  const editEvent = (event) => {\r\n    setOpen(true);\r\n    const newEditEvent = calevents.find((elem) => elem.title === event.title);\r\n    setColor(event.color);\r\n    setTitle(newEditEvent.title);\r\n    setColor(newEditEvent.color);\r\n    setUpdate(event);\r\n  };\r\n  const updateEvent = (e) => {\r\n    e.preventDefault();\r\n\r\n    setCalEvents(\r\n      calevents.map((elem) => {\r\n        if (elem.title === update.title) {\r\n          return { ...elem, title, color };\r\n        }\r\n        return elem;\r\n      }),\r\n    );\r\n    setOpen(false);\r\n    setTitle('');\r\n    setColor('');\r\n    setUpdate(null);\r\n  };\r\n  const inputChangeHandler = (e) => setTitle(e.target.value);\r\n\r\n  const selectinputChangeHandler = (id) => setColor(id);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n    const newEvents = calevents;\r\n    newEvents.push({\r\n      title,\r\n      start: slot.start,\r\n      end: slot.end,\r\n      color,\r\n    });\r\n    setOpen(false);\r\n    e.target.reset();\r\n\r\n    setCalEvents(newEvents);\r\n    setTitle('');\r\n  };\r\n  const deleteHandler = (event) => {\r\n    const updatecalEvents = calevents.filter((ind) => ind.title !== event.title);\r\n    setCalEvents(updatecalEvents);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setTitle('');\r\n    setUpdate(null);\r\n  };\r\n\r\n  const eventColors = (event) => {\r\n    if (event.color) {\r\n      return { className: `event-${event.color}` };\r\n    }\r\n    return { className: `event-default` };\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardBody>\r\n          <Calendar\r\n            selectable\r\n            events={calevents}\r\n            defaultView=\"month\"\r\n            scrollToTime={new Date(1970, 1, 1, 6)}\r\n            defaultDate={new Date()}\r\n            localizer={localizer}\r\n            style={{ height: 'calc(100vh - 350px' }}\r\n            onSelectEvent={(event) => editEvent(event)}\r\n            onSelectSlot={(slotInfo) => addNewEventAlert(slotInfo)}\r\n            eventPropGetter={(event) => eventColors(event)}\r\n          />\r\n          <Modal isOpen={open}>\r\n            <ModalHeader toggle={handleClose}>{update ? 'Update Event' : 'Add Event'}</ModalHeader>\r\n            <Form onSubmit={update ? updateEvent : submitHandler}>\r\n              <ModalBody>\r\n                <h6>Event Title</h6>\r\n                <Input\r\n                  id=\"Event Title\"\r\n                  placeholder=\"Enter Event Title\"\r\n                  value={title}\r\n                  onChange={inputChangeHandler}\r\n                />\r\n                <br />\r\n                <h6>Select Event Color</h6>\r\n                <div className=\"button-group\">\r\n                  {ColorVariation.map((colorbg) => (\r\n                    <Button\r\n                      color={colorbg.value}\r\n                      key={colorbg.eColor}\r\n                      size=\"sm\"\r\n                      onClick={() => selectinputChangeHandler(colorbg.value)}\r\n                    >\r\n                      {colorbg.value === color ? (\r\n                        <i className=\"bi bi-check\" />\r\n                      ) : (\r\n                        <i className=\"bi bi-circle\" />\r\n                      )}\r\n                    </Button>\r\n                  ))}\r\n                </div>\r\n              </ModalBody>\r\n              <ModalFooter>\r\n                {update ? (\r\n                  <Button\r\n                    type=\"submit\"\r\n                    color=\"danger\"\r\n                    outline\r\n                    onClick={() => deleteHandler(update)}\r\n                  >\r\n                    Delete\r\n                  </Button>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                <Button type=\"submit\" color=\"success\" disabled={!title}>\r\n                  {update ? 'Update' : 'Add'}\r\n                </Button>\r\n              </ModalFooter>\r\n            </Form>\r\n          </Modal>\r\n        </CardBody>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CalendarApp;\r\n"],"names":["today","Date","y","getFullYear","m","getMonth","d","getDate","title","allDay","start","end","color","moment","localizer","momentLocalizer","CalendarApp","calevents","setCalEvents","useState","EventData","open","setOpen","React","setTitle","slot","setSlot","setColor","update","setUpdate","_jsx","_Fragment","children","Card","_jsxs","CardBody","Calendar","selectable","events","defaultView","scrollToTime","defaultDate","style","height","onSelectEvent","event","newEditEvent","find","elem","editEvent","onSelectSlot","slotInfo","addNewEventAlert","eventPropGetter","className","concat","eventColors","Modal","isOpen","ModalHeader","toggle","handleClose","Form","onSubmit","e","preventDefault","map","_objectSpread","newEvents","push","target","reset","ModalBody","Input","id","placeholder","value","onChange","eColor","colorbg","Button","size","onClick","selectinputChangeHandler","ModalFooter","type","outline","updatecalEvents","filter","ind","deleteHandler","disabled"],"sourceRoot":""}