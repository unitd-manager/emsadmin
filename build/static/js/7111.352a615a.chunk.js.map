{"version":3,"file":"static/js/7111.352a615a.chunk.js","mappings":"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","sources":["views/smartconTables/Task.js","components/Message.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\r\nimport { Col, Row, Card, Input, Form, Button, CardBody } from 'reactstrap';\r\nimport Box from '@mui/material/Box';\r\nimport Tab from '@mui/material/Tab';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport TabContext from '@mui/lab/TabContext';\r\nimport TabList from '@mui/lab/TabList';\r\nimport TabPanel from '@mui/lab/TabPanel';\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\nimport '../form-editor/editor.scss';\r\nimport moment from 'moment';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport message from '../../components/Message';\r\nimport api from '../../constants/api';\r\nimport AppContext from '../../context/AppContext';\r\n\r\nconst DashboardComments = () => {\r\n  // All state variables\r\n  const [staff, setStaff] = useState();\r\n  const [selectedItem, setSelectedItem] = useState();\r\n  const { loggedInuser } = useContext(AppContext);\r\n  const [yesterdayNotes, setYesterdayNotes] = useState();\r\n\r\n  // const [editTask, setEditTask] = useState();\r\n  const [value, setValue] = useState({});\r\n\r\n  const handleChange = (event, newValue, key) => {\r\n    setValue({ ...value, [key]: newValue });\r\n  };\r\n\r\n  function createKeysForTab(arr) {\r\n    const obj = {};\r\n    for (let i = 0; i < arr.length; i++) {\r\n      obj[i] = 1;\r\n    }\r\n    setValue(obj);\r\n  }\r\n\r\n  function checkWhichTab(index) {\r\n    return value[index];\r\n  }\r\n  //   Api call for getting Yesterday Notes\r\n  const getLastNotes = () => {\r\n    api\r\n      .post('/attendance/getYesterdayNotes', {\r\n        staff_id: loggedInuser.staff_id,\r\n      })\r\n      .then((res) => {\r\n        if (res.data.status === '200') {\r\n          setYesterdayNotes(res.data.data);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        message('Unable to edit record.', 'error');\r\n      });\r\n  };\r\n  //   Api call for getting Staff Data\r\n  const getStaff = () => {\r\n    api\r\n      .post('/attendance/getStaff', {\r\n        date: moment().format('DD-MM-YYYY'),\r\n      })\r\n      .then((res) => {\r\n        setStaff(res.data.data);\r\n        createKeysForTab(res.data.data);\r\n        getLastNotes();\r\n      })\r\n      .catch(() => {\r\n        message('Unable to edit record.', 'error');\r\n      });\r\n  };\r\n\r\n  const insertAttendance = (elem, attendanceId) => {\r\n    const user = {};\r\n    user.staff_id = elem.staff_id;\r\n    user.record_date = moment().format('h:mm:ss a');\r\n    user.creation_date = moment().format('DD-MM-YYYY');\r\n    user.modification_date = moment().format('DD-MM-YYYY');\r\n    user.created_by = elem.staff_id;\r\n    user.modified_by = elem.staff_id;\r\n    if (attendanceId !== '') {\r\n      user.attendance_id = attendanceId;\r\n    }\r\n    api\r\n      .post('/attendance/insertAttendance', user)\r\n      .then(() => {\r\n        message('Attendance inserted successfully.', 'success');\r\n        getStaff();\r\n      })\r\n      .catch(() => {\r\n        message('Network connection error.', 'error');\r\n      });\r\n  };\r\n\r\n  const changeNotes = (e, noteType) => {\r\n    if (e.target.value === '') {\r\n      message('Enter valid Notes', 'warning');\r\n    } else {\r\n      /* eslint-disable-next-line */\r\n      if (selectedItem.attendance_id) {\r\n        /* eslint-disable-next-line */\r\n        selectedItem.notes = e.target.value;\r\n        selectedItem.type = noteType;\r\n        /* eslint-disable-line */\r\n        api\r\n          .post('/attendance/editNotes', selectedItem)\r\n          .then(() => {\r\n            getLastNotes();\r\n            message('Task edited successfully.', 'success');\r\n          })\r\n          .catch(() => {\r\n            message('Cannot Update Data', 'error');\r\n          });\r\n      } else {\r\n        message('Please Login first', 'error');\r\n      }\r\n    }\r\n  };\r\n  const getPreviousNoteVal = (selectedStaff) => {\r\n    const result =\r\n      yesterdayNotes &&\r\n      yesterdayNotes.filter((obj) => {\r\n        return obj.staff_id === selectedStaff;\r\n      });\r\n    /* eslint-disable-next-line */\r\n    if (result) {\r\n      return result[0];\r\n    }\r\n    return { notes: '', completed_notes: '', in_progress_notes: '' };\r\n  };\r\n  useEffect(() => {\r\n    getStaff();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <ToastContainer></ToastContainer>\r\n      <Card className=\"shadow-none\">\r\n        <Form>\r\n          <CardBody className=\"shadow-none\">\r\n            <Row>\r\n              {staff &&\r\n                staff.map((element, index) => {\r\n                  return (\r\n                    <Col md=\"4\" key={element.staff_id}>\r\n                      <Card\r\n                        key={element.staff_id}\r\n                        className=\"border border-gray shadow-none p-1 pt-2\"\r\n                      >\r\n                        <Row className=\"border-bottom border-gray p-2\">\r\n                          <Col md=\"9\">\r\n                            <span>\r\n                              <Row>\r\n                                <Col md=\"3\">\r\n                                  <Avatar />\r\n                                </Col>\r\n                                <Col md=\"9\">\r\n                                  <Row>\r\n                                    <b>{element.first_name}</b>\r\n                                  </Row>\r\n                                  <Row>\r\n                                    <span>designation</span>\r\n                                  </Row>\r\n                                </Col>\r\n                              </Row>\r\n                            </span>\r\n                          </Col>\r\n\r\n                          <Col md=\"3\">\r\n                            {loggedInuser.staff_id === element.staff_id &&\r\n                              (element.time_in && !element.leave_time ? (\r\n                                <Button\r\n                                  color=\"primary\"\r\n                                  className=\"shadow-none\"\r\n                                  size=\"sm\"\r\n                                  onClick={() => {\r\n                                    insertAttendance(element, element.attendance_id);\r\n                                  }}\r\n                                >\r\n                                  Logout\r\n                                </Button>\r\n                              ) : !element.time_in ? (\r\n                                <Button\r\n                                  color=\"primary\"\r\n                                  className=\"shadow-none\"\r\n                                  size=\"sm\"\r\n                                  onClick={() => {\r\n                                    insertAttendance(element, '');\r\n                                  }}\r\n                                >\r\n                                  Login\r\n                                </Button>\r\n                              ) : (\r\n                                <Button color=\"success\" className=\"shadow-none\" size=\"sm\">\r\n                                  Marked\r\n                                </Button>\r\n                              ))}\r\n                          </Col>\r\n                        </Row>\r\n                        <br></br>\r\n\r\n                        <div className=\"text-muted mb-3 card-subtitle\">\r\n                          <p>\r\n                            Time In:<code> {element.time_in ? element.time_in : ''}</code>{' '}\r\n                          </p>\r\n                          <p>\r\n                            Time Out:<code> {element.leave_time ? element.leave_time : ''}</code>{' '}\r\n                          </p>\r\n                        </div>\r\n\r\n                        <Row>\r\n                          <TabContext value={checkWhichTab(index) ?? 1}>\r\n                            <Box\r\n                              sx={{ borderBottom: 1, borderColor: 'divider' }}\r\n                              className=\"col-12\"\r\n                            >\r\n                              <TabList\r\n                                onChange={(event, newValue) => handleChange(event, newValue, index)}\r\n                                aria-label=\"lab API tabs example\"\r\n                              >\r\n                                <Tab label=\"Pending\" value={1} className=\"col-4\" />\r\n                                <Tab label=\"Progress\" value={2} className=\"col-4\" />\r\n                                <Tab label=\"Comments\" value={3} className=\"col-4\" />\r\n                              </TabList>\r\n                            </Box>\r\n                            <TabPanel value={1}>\r\n                              <Input\r\n                                onFocus={() => {\r\n                                  setSelectedItem(element);\r\n                                 \r\n                                }}\r\n                                onBlur={(e) => {\r\n                                  changeNotes(e, 'pending');\r\n                                }}\r\n                                type=\"textarea\"\r\n                                name=\"task_pending\"\r\n                                defaultValue={\r\n                                  getPreviousNoteVal(element.staff_id) &&\r\n                                  getPreviousNoteVal(element.staff_id).notes\r\n                                }\r\n                                disabled={loggedInuser.staff_id !== element.staff_id}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel value={2}>\r\n                              <Input\r\n                                onFocus={() => {\r\n                                  setSelectedItem(element);\r\n                                }}\r\n                                onBlur={(e) => {\r\n                                  changeNotes(e, 'inprogress');\r\n                                }}\r\n                                type=\"textarea\"\r\n                                name=\"task_progress\"\r\n                                defaultValue={\r\n                                  getPreviousNoteVal(element.staff_id) &&\r\n                                  getPreviousNoteVal(element.staff_id).in_progress_notes\r\n                                }\r\n                                disabled={loggedInuser.staff_id !== element.staff_id}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel value={3}>\r\n                              <Input\r\n                                onFocus={() => {\r\n                                  setSelectedItem(element);\r\n                                }}\r\n                                onBlur={(e) => {\r\n                                  changeNotes(e, 'completed');\r\n                                }}\r\n                                type=\"textarea\"\r\n                                name=\"task_complete\"\r\n                                defaultValue={\r\n                                  getPreviousNoteVal(element.staff_id) &&\r\n                                  getPreviousNoteVal(element.staff_id).completed_notes\r\n                                }\r\n                                disabled={loggedInuser.staff_id !== element.staff_id}\r\n                              />\r\n                            </TabPanel>\r\n                          </TabContext>\r\n                        </Row>\r\n                      </Card>\r\n                    </Col>\r\n                  );\r\n                })}\r\n            </Row>\r\n          </CardBody>\r\n        </Form>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\nexport default DashboardComments;\r\n","import {toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst message = (msg,type) => {\r\n    if(type === 'success'){\r\n       return toast.success(msg, {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n            theme: \"colored\",\r\n            });\r\n    } if(type === 'error'){\r\n        return toast.error(msg, {\r\n             position: \"top-right\",\r\n             autoClose: 5000,\r\n             hideProgressBar: false,\r\n             closeOnClick: true,\r\n             pauseOnHover: true,\r\n             draggable: true,\r\n             progress: undefined,\r\n             theme: \"colored\",\r\n             });\r\n     } if(type === 'info'){\r\n        return toast.info(msg, {\r\n             position: \"top-right\",\r\n             autoClose: 5000,\r\n             hideProgressBar: false,\r\n             closeOnClick: true,\r\n             pauseOnHover: true,\r\n             draggable: true,\r\n             progress: undefined,\r\n             theme: \"colored\",\r\n             });\r\n            }if(type === 'warning'){\r\n               return toast.warning(msg, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: \"colored\",\r\n                    });\r\n                   }\r\n            return toast(msg);\r\n   \r\n  \r\n}\r\nexport default message\r\n"],"names":["DashboardComments","staff","setStaff","useState","selectedItem","setSelectedItem","loggedInuser","useContext","AppContext","yesterdayNotes","setYesterdayNotes","value","setValue","checkWhichTab","index","getLastNotes","api","post","staff_id","then","res","data","status","catch","message","getStaff","date","moment","format","arr","obj","i","length","createKeysForTab","insertAttendance","elem","attendanceId","user","record_date","creation_date","modification_date","created_by","modified_by","attendance_id","changeNotes","e","noteType","target","notes","type","getPreviousNoteVal","selectedStaff","result","filter","completed_notes","in_progress_notes","useEffect","_jsxs","_Fragment","children","_jsx","ToastContainer","Card","className","Form","CardBody","Row","map","element","_checkWhichTab","Col","md","Avatar","first_name","time_in","leave_time","Button","color","size","onClick","TabContext","Box","sx","borderBottom","borderColor","TabList","onChange","event","newValue","handleChange","key","_objectSpread","Tab","label","TabPanel","Input","onFocus","onBlur","name","defaultValue","disabled","msg","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","error","info","warning"],"sourceRoot":""}