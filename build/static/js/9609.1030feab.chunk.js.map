{"version":3,"file":"static/js/9609.1030feab.chunk.js","mappings":"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","sources":["constants/creationdatetime.js","components/CreationModification.js","components/ComponentCard.js","views/detailTable/StaffDetails.js","components/Message.js","layouts/breadcrumbs/BreadCrumbs.js"],"sourcesContent":["import moment from \"moment\"\r\n\r\nconst creationdatetime = moment().format('DD-MM-YYYY h:mm:ss a')\r\nexport default creationdatetime \r\n","import React from 'react';\r\nimport { CardTitle, Row, Col } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function CreationModification({ details = null, title }) {\r\n  CreationModification.propTypes = {\r\n    details: PropTypes.object,\r\n    title: PropTypes.string,\r\n  };\r\n  return (\r\n    <>\r\n      <CardTitle tag=\"h4\" className=\"border-bottom px-4 py-3 mb-0\">\r\n        <Row>\r\n          <Col>{title}</Col>\r\n          {details && (\r\n            <Col>\r\n              <Row>\r\n                <small> Creation: {details && details.created_by} {details && details.creation_date}</small>\r\n              </Row>\r\n              <Row className=\"d-flex\">\r\n                <small> Modified: {details && details.modified_by} {details && details.modification_date}</small>\r\n              </Row>\r\n            </Col>\r\n          )}\r\n        </Row>\r\n      </CardTitle>\r\n    </>\r\n   );\r\n}","import { Card, CardBody, CardSubtitle } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\nimport CreationModification from './CreationModification';\r\n\r\nconst ComponentCard = ({ children, title, subtitle,creationModificationDate }) => {\r\n  return (\r\n    <Card className='shadow-none'>\r\n      <CreationModification details={creationModificationDate} title={title}></CreationModification>\r\n      {/* <CardTitle tag=\"h4\" className=\"border-bottom px-4 py-3 mb-0\">\r\n        {title}\r\n        <p tag='h2' className=\"float-end small fs-5\">{righttitle}</p>\r\n      </CardTitle> */}\r\n      <CardBody className=\"p-4\">\r\n        <CardSubtitle className=\"text-muted mb-3\">{subtitle || ''}</CardSubtitle>\r\n        <div>{children}</div>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nComponentCard.propTypes = {\r\n  children: PropTypes.node,\r\n  title: PropTypes.string,\r\n  subtitle: PropTypes.node,\r\n  creationModificationDate:PropTypes.any\r\n};\r\n\r\nexport default ComponentCard;\r\n","import React from 'react';\r\nimport { Row, Col, FormGroup, Label, Button, Input } from 'reactstrap';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport BreadCrumbs from '../../layouts/breadcrumbs/BreadCrumbs';\r\nimport ComponentCard from '../../components/ComponentCard';\r\nimport api from '../../constants/api';\r\nimport message from '../../components/Message';\r\nimport creationdatetime from '../../constants/creationdatetime';\r\n\r\nconst StaffDetails = () => {\r\n  // All state variables\r\n\r\n  const [staffdetails, setStaffDetails] = React.useState({ email: '', first_name: '' });\r\n\r\n  // Navigation and Parameter Constants\r\n\r\n  const navigate = useNavigate();\r\n\r\n  //All Functions/Methods\r\n\r\n  //Setting Data in Staff Details\r\n  const handleInputs = (e) => {\r\n    setStaffDetails({ ...staffdetails, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  //Api call for Insert Staff Data\r\n  const insertStaffData = () => {\r\n    staffdetails.creation_date = creationdatetime;\r\n\r\n    if (!staffdetails.email) {\r\n      message('Email is required', 'warning');\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(staffdetails.email)) {\r\n      message('Invalid email address', 'warning');\r\n    } else if (staffdetails.email !== '' && staffdetails.first_name !== '') {\r\n      api\r\n        .post('/staff/insertStaff', staffdetails)\r\n        .then((res) => {\r\n          const insertedDataId = res.data.data.insertId;\r\n          message('Staff Details inserted successfully.', 'success');\r\n          setTimeout(() => {\r\n            navigate(`/StaffEdit/${insertedDataId}`);\r\n          }, 300);\r\n        })\r\n        .catch(() => {\r\n          message('Unable to edit record.', 'error');\r\n        });\r\n    } else {\r\n      message('please fill all fields.', 'warning');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <BreadCrumbs />\r\n      <ToastContainer />\r\n      <Row>\r\n        <Col md=\"6\" xs=\"12\">\r\n          <ComponentCard title=\"key Details\">\r\n            <FormGroup>\r\n              <Row>\r\n                <Col md=\"12\">\r\n                  <Label>\r\n                    Name<span className=\"required\"> *</span>\r\n                  </Label>\r\n                  <Input type=\"text\" onChange={handleInputs} name=\"first_name\" />\r\n                </Col>\r\n              </Row>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Row>\r\n                <Col md=\"12\">\r\n                  <Label>\r\n                    Email<span className=\"required\"> *</span>\r\n                  </Label>\r\n                  <Input\r\n                    type=\"email\"\r\n                    onChange={handleInputs}\r\n                    value={staffdetails && staffdetails.email}\r\n                    name=\"email\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Row>\r\n                <div className=\"pt-3 mt-3 d-flex align-items-center gap-2\">\r\n                  <Button\r\n                    color=\"primary\"\r\n                    type=\"button\"\r\n                    className=\"btn mr-2 shadow-none\"\r\n                    onClick={() => {\r\n                      insertStaffData();\r\n                    }}\r\n                  >\r\n                    Save & Continue\r\n                  </Button>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-dark shadow-none\"\r\n                    onClick={(e) => {\r\n                      if (window.confirm('Are you sure you want to cancel? ')) {\r\n                        navigate('/Staff');\r\n                      } else {\r\n                        e.preventDefault();\r\n                      }\r\n                    }}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                </div>\r\n              </Row>\r\n            </FormGroup>\r\n          </ComponentCard>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StaffDetails;\r\n","import {toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst message = (msg,type) => {\r\n    if(type === 'success'){\r\n       return toast.success(msg, {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n            theme: \"colored\",\r\n            });\r\n    } if(type === 'error'){\r\n        return toast.error(msg, {\r\n             position: \"top-right\",\r\n             autoClose: 5000,\r\n             hideProgressBar: false,\r\n             closeOnClick: true,\r\n             pauseOnHover: true,\r\n             draggable: true,\r\n             progress: undefined,\r\n             theme: \"colored\",\r\n             });\r\n     } if(type === 'info'){\r\n        return toast.info(msg, {\r\n             position: \"top-right\",\r\n             autoClose: 5000,\r\n             hideProgressBar: false,\r\n             closeOnClick: true,\r\n             pauseOnHover: true,\r\n             draggable: true,\r\n             progress: undefined,\r\n             theme: \"colored\",\r\n             });\r\n            }if(type === 'warning'){\r\n               return toast.warning(msg, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: \"colored\",\r\n                    });\r\n                   }\r\n            return toast(msg);\r\n   \r\n  \r\n}\r\nexport default message\r\n","import { Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { useLocation, Link } from 'react-router-dom';\r\n//import SidebarData from '../sidebars/sidebardata/SidebarData';\r\n\r\nconst BreadCrumbs = (prop) => {\r\n  const location = useLocation();\r\n  const firstUrl = location.pathname.split('/')[1];\r\n  const secondUrl = location.pathname.split('/')[2];\r\n  \r\n  return (\r\n    <>\r\n      {/* <h4 className=\"text-capitalize\">{secondUrl ? `${secondUrl}` : `${firstUrl}`}</h4> */}\r\n      <h4>{prop.heading}</h4>\r\n      <Breadcrumb>\r\n        <BreadcrumbItem to=\"/\" tag={Link} className=\"text-decoration-none\">\r\n          Home\r\n        </BreadcrumbItem>\r\n        {firstUrl ? <BreadcrumbItem active>{firstUrl}</BreadcrumbItem> : ''}\r\n        {secondUrl ? <BreadcrumbItem active>{secondUrl}</BreadcrumbItem> : ''}\r\n      </Breadcrumb>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BreadCrumbs;\r\n"],"names":["moment","format","CreationModification","_ref","details","title","_jsx","_Fragment","children","CardTitle","tag","className","_jsxs","Row","Col","created_by","creation_date","modified_by","modification_date","subtitle","creationModificationDate","Card","CardBody","CardSubtitle","StaffDetails","staffdetails","setStaffDetails","React","email","first_name","navigate","useNavigate","handleInputs","e","_objectSpread","target","name","value","BreadCrumbs","ToastContainer","md","xs","ComponentCard","FormGroup","Label","Input","type","onChange","Button","color","onClick","creationdatetime","test","api","post","then","res","insertedDataId","data","insertId","message","setTimeout","concat","catch","window","confirm","preventDefault","msg","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","error","info","warning","prop","location","useLocation","firstUrl","pathname","split","secondUrl","heading","Breadcrumb","BreadcrumbItem","to","Link","active"],"sourceRoot":""}