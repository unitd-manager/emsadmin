{"version":3,"file":"static/js/9551.a5c295ca.chunk.js","mappings":"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","sources":["components/CreationModification.js","components/ComponentCard.js","views/detailTable/SettingDetails.js","components/Message.js","layouts/breadcrumbs/BreadCrumbs.js"],"sourcesContent":["import React from 'react';\r\nimport { CardTitle, Row, Col } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function CreationModification({ details = null, title }) {\r\n  CreationModification.propTypes = {\r\n    details: PropTypes.object,\r\n    title: PropTypes.string,\r\n  };\r\n  return (\r\n    <>\r\n      <CardTitle tag=\"h4\" className=\"border-bottom px-4 py-3 mb-0\">\r\n        <Row>\r\n          <Col>{title}</Col>\r\n          {details && (\r\n            <Col>\r\n              <Row>\r\n                <small> Creation: {details && details.created_by} {details && details.creation_date}</small>\r\n              </Row>\r\n              <Row className=\"d-flex\">\r\n                <small> Modified: {details && details.modified_by} {details && details.modification_date}</small>\r\n              </Row>\r\n            </Col>\r\n          )}\r\n        </Row>\r\n      </CardTitle>\r\n    </>\r\n   );\r\n}","import { Card, CardBody, CardSubtitle } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\nimport CreationModification from './CreationModification';\r\n\r\nconst ComponentCard = ({ children, title, subtitle,creationModificationDate }) => {\r\n  return (\r\n    <Card className='shadow-none'>\r\n      <CreationModification details={creationModificationDate} title={title}></CreationModification>\r\n      {/* <CardTitle tag=\"h4\" className=\"border-bottom px-4 py-3 mb-0\">\r\n        {title}\r\n        <p tag='h2' className=\"float-end small fs-5\">{righttitle}</p>\r\n      </CardTitle> */}\r\n      <CardBody className=\"p-4\">\r\n        <CardSubtitle className=\"text-muted mb-3\">{subtitle || ''}</CardSubtitle>\r\n        <div>{children}</div>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nComponentCard.propTypes = {\r\n  children: PropTypes.node,\r\n  title: PropTypes.string,\r\n  subtitle: PropTypes.node,\r\n  creationModificationDate:PropTypes.any\r\n};\r\n\r\nexport default ComponentCard;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Row, Col, Form, FormGroup, Label, Input, Button } from 'reactstrap';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport BreadCrumbs from '../../layouts/breadcrumbs/BreadCrumbs';\r\nimport ComponentCard from '../../components/ComponentCard';\r\nimport api from '../../constants/api';\r\nimport message from '../../components/Message';\r\n\r\nconst SettingDetails = () => {\r\n  //All state variables\r\n  const [settingforms, setSettingForms] = useState({\r\n    key_text: '',\r\n  });\r\n  //Navigation and Parameters\r\n  const navigate = useNavigate();\r\n  //Setting data in settingForms\r\n  const handleInputsSettingForms = (e) => {\r\n    setSettingForms({ ...settingforms, [e.target.name]: e.target.value });\r\n  };\r\n  //Insert Setting\r\n  const insertSetting = () => {\r\n    if (settingforms.key_text !== '')\r\n      api\r\n        .post('/setting/insertSetting', settingforms)\r\n        .then((res) => {\r\n          const insertedDataId = res.data.data.insertId;\r\n          console.log(insertedDataId);\r\n          message('Setting inserted successfully.', 'success');\r\n          setTimeout(() => {\r\n            navigate(`/SettingEdit/${insertedDataId}`);\r\n          }, 300);\r\n        })\r\n        .catch(() => {\r\n          message('Network connection error.', 'error');\r\n        });\r\n    else {\r\n      message('Please fill all required fields.', 'error');\r\n    }\r\n  };\r\n  useEffect(() => {}, []);\r\n  return (\r\n    <div>\r\n      <BreadCrumbs />\r\n      <ToastContainer />\r\n      <Row>\r\n        <Col md=\"6\" xs=\"12\">\r\n          {/* Key Details */}\r\n          <ComponentCard title=\"Key Details\">\r\n            <Form>\r\n              <FormGroup>\r\n                <Row>\r\n                  <Col md=\"12\">\r\n                    <Label>\r\n                      {' '}\r\n                      Key Text <span className=\"required\"> *</span>{' '}\r\n                    </Label>\r\n                    <Input type=\"text\" name=\"key_text\" onChange={handleInputsSettingForms} />\r\n                  </Col>\r\n                </Row>\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Row>\r\n                  <div className=\"pt-3 mt-3 d-flex align-items-center gap-2\">\r\n                    <Button\r\n                      color=\"primary\"\r\n                      onClick={() => {\r\n                        insertSetting();\r\n                      }}\r\n                      type=\"button\"\r\n                      className=\"btn mr-2 shadow-none\"\r\n                    >\r\n                      Save & Continue\r\n                    </Button>\r\n                    <Button\r\n                      onClick={() => {\r\n                        navigate('/Setting');\r\n                      }}\r\n                      type=\"button\"\r\n                      className=\"btn btn-dark shadow-none\"\r\n                    >\r\n                      Go to List\r\n                    </Button>\r\n                  </div>\r\n                </Row>\r\n              </FormGroup>\r\n            </Form>\r\n          </ComponentCard>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingDetails;\r\n","import {toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst message = (msg,type) => {\r\n    if(type === 'success'){\r\n       return toast.success(msg, {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n            theme: \"colored\",\r\n            });\r\n    } if(type === 'error'){\r\n        return toast.error(msg, {\r\n             position: \"top-right\",\r\n             autoClose: 5000,\r\n             hideProgressBar: false,\r\n             closeOnClick: true,\r\n             pauseOnHover: true,\r\n             draggable: true,\r\n             progress: undefined,\r\n             theme: \"colored\",\r\n             });\r\n     } if(type === 'info'){\r\n        return toast.info(msg, {\r\n             position: \"top-right\",\r\n             autoClose: 5000,\r\n             hideProgressBar: false,\r\n             closeOnClick: true,\r\n             pauseOnHover: true,\r\n             draggable: true,\r\n             progress: undefined,\r\n             theme: \"colored\",\r\n             });\r\n            }if(type === 'warning'){\r\n               return toast.warning(msg, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: \"colored\",\r\n                    });\r\n                   }\r\n            return toast(msg);\r\n   \r\n  \r\n}\r\nexport default message\r\n","import { Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { useLocation, Link } from 'react-router-dom';\r\n//import SidebarData from '../sidebars/sidebardata/SidebarData';\r\n\r\nconst BreadCrumbs = (prop) => {\r\n  const location = useLocation();\r\n  const firstUrl = location.pathname.split('/')[1];\r\n  const secondUrl = location.pathname.split('/')[2];\r\n  \r\n  return (\r\n    <>\r\n      {/* <h4 className=\"text-capitalize\">{secondUrl ? `${secondUrl}` : `${firstUrl}`}</h4> */}\r\n      <h4>{prop.heading}</h4>\r\n      <Breadcrumb>\r\n        <BreadcrumbItem to=\"/\" tag={Link} className=\"text-decoration-none\">\r\n          Home\r\n        </BreadcrumbItem>\r\n        {firstUrl ? <BreadcrumbItem active>{firstUrl}</BreadcrumbItem> : ''}\r\n        {secondUrl ? <BreadcrumbItem active>{secondUrl}</BreadcrumbItem> : ''}\r\n      </Breadcrumb>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BreadCrumbs;\r\n"],"names":["CreationModification","_ref","details","title","_jsx","_Fragment","children","CardTitle","tag","className","_jsxs","Row","Col","created_by","creation_date","modified_by","modification_date","subtitle","creationModificationDate","Card","CardBody","CardSubtitle","SettingDetails","settingforms","setSettingForms","useState","key_text","navigate","useNavigate","useEffect","BreadCrumbs","ToastContainer","md","xs","ComponentCard","Form","FormGroup","Label","Input","type","name","onChange","e","_objectSpread","target","value","Button","color","onClick","api","post","then","res","insertedDataId","data","insertId","console","log","message","setTimeout","concat","catch","msg","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","error","info","warning","prop","location","useLocation","firstUrl","pathname","split","secondUrl","heading","Breadcrumb","BreadcrumbItem","to","Link","active"],"sourceRoot":""}