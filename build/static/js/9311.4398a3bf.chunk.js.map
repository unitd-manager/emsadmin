{"version":3,"file":"static/js/9311.4398a3bf.chunk.js","mappings":"mJAGA,MAkDA,EAlDgBA,CAACC,EAAIC,IACL,YAATA,EACOC,EAAAA,GAAMC,QAAQH,EAAK,CACrBI,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVC,MAAO,YAED,UAATX,EACMC,EAAAA,GAAMW,MAAMb,EAAK,CACnBI,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVC,MAAO,YAED,SAATX,EACKC,EAAAA,GAAMY,KAAKd,EAAK,CAClBI,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVC,MAAO,YAEK,YAATX,EACMC,EAAAA,GAAMa,QAAQf,EAAK,CACrBI,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVC,MAAO,aAGRV,EAAAA,EAAAA,IAAMF,E,oLCtCzB,MAAMgB,EAAgBC,EAAAA,MAAW,IAAM,kCA6NvC,EA3NuBC,IAEtB,IAFuB,eAACC,EAAc,kBAACC,EAAiB,cAACC,GAAcH,EAUpE,MAAOI,EAAWC,IAAgBC,EAAAA,EAAAA,UAASH,IACpCI,EAAYC,IAAiBF,EAAAA,EAAAA,UAAS,KACtCG,EAAUC,IAAeJ,EAAAA,EAAAA,UAAS,IAEjCK,EAAcC,IAClBP,GAAYQ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAGT,GAAS,IAAE,CAACQ,EAAEE,OAAOC,MAAMH,EAAEE,OAAOE,UAenDC,EAAmBA,CAACL,EAAE7B,KAEpBsB,GAAYQ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAGT,GAAS,IAAE,CAACrB,GAAMmC,KAAYC,EAAAA,EAAAA,cAAaP,EAAEQ,0BAkCxE,OAPEC,EAAAA,EAAAA,YAAU,KACNhB,EAAaF,GAxBoBmB,KACjC,GAAGA,GAAuBA,EAAoBC,gBAAgB,CAC1D,MAAMC,EAAeC,IAAYH,GAAuBA,EAAoBC,iBAC5E,GAAIC,EAAc,CAChB,MAAME,EAAeC,EAAAA,aAAaC,qBAAqBJ,EAAaK,eAC9DC,EAAcC,EAAAA,YAAYC,kBAAkBN,GAClDlB,EAAcsB,EAChB,CACJ,GAiBAG,CAA4B9B,GAbJmB,KACxB,GAAGA,GAAuBA,EAAoBY,oBAAoB,CAC9D,MAAMV,EAAeC,IAAYH,GAAuBA,EAAoBY,qBAC5E,GAAIV,EAAc,CAChB,MAAME,EAAeC,EAAAA,aAAaC,qBAAqBJ,EAAaK,eAC9DC,EAAcC,EAAAA,YAAYC,kBAAkBN,GAClDhB,EAAYoB,EACd,CACJ,GAMAK,CAAmBhC,KACpB,CAACA,KAIJiC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UAECC,EAAAA,EAAAA,MAACC,EAAAA,GAAK,CAACC,KAAK,KAAKC,OAAQzC,EAAeqC,SAAA,EACrCC,EAAAA,EAAAA,MAACI,EAAAA,GAAW,CAAAL,SAAA,CAAC,cACbF,EAAAA,EAAAA,KAACQ,EAAAA,GAAM,CAACC,MAAM,YAAYC,QAASA,KAAK5C,GAAkB,IAASoC,SAAC,UAEpEF,EAAAA,EAAAA,KAACW,EAAAA,GAAS,CAAAT,UACNF,EAAAA,EAAAA,KAACY,EAAAA,GAAS,CAAAV,UACNF,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAAAX,UACDF,EAAAA,EAAAA,KAACY,EAAAA,GAAS,CAAAV,UACVC,EAAAA,EAAAA,MAACzC,EAAa,CAAAwC,SAAA,EACVC,EAAAA,EAAAA,MAACW,EAAAA,GAAG,CAAAZ,SAAA,EACJF,EAAAA,EAAAA,KAACe,EAAAA,GAAG,CAACC,GAAG,IAAGd,UACPC,EAAAA,EAAAA,MAACS,EAAAA,GAAS,CAAAV,SAAA,EACVF,EAAAA,EAAAA,KAACiB,EAAAA,GAAK,CAAAf,SAAC,gBACPF,EAAAA,EAAAA,KAACkB,EAAAA,GAAK,CAACvE,KAAK,OAAOgC,KAAK,aAAawC,aAAcnD,GAAaA,EAAUoD,WAAYC,SAAU9C,UAGpGyB,EAAAA,EAAAA,KAACe,EAAAA,GAAG,CAACC,GAAG,IAAGd,UACPC,EAAAA,EAAAA,MAACS,EAAAA,GAAS,CAAAV,SAAA,EACVF,EAAAA,EAAAA,KAACiB,EAAAA,GAAK,CAAAf,SAAC,gBACPF,EAAAA,EAAAA,KAACkB,EAAAA,GAAK,CAACvE,KAAK,OAAOgC,KAAK,aAAawC,aAAcnD,GAAaA,EAAUsD,WAAYD,SAAU9C,UAGpGyB,EAAAA,EAAAA,KAACe,EAAAA,GAAG,CAACC,GAAG,IAAGd,UACPC,EAAAA,EAAAA,MAACS,EAAAA,GAAS,CAAAV,SAAA,EACVF,EAAAA,EAAAA,KAACiB,EAAAA,GAAK,CAAAf,SAAC,kBACPC,EAAAA,EAAAA,MAACe,EAAAA,GAAK,CAACvE,KAAK,SAASgC,KAAK,eAAewC,aAAcnD,GAAaA,EAAUuD,aAAcF,SAAU9C,EAAW2B,SAAA,EACjHF,EAAAA,EAAAA,KAAA,UAAQwB,SAAS,WAAW5C,MAAM,MAAKsB,SAAC,SACxCF,EAAAA,EAAAA,KAAA,UAAQpB,MAAM,SAAQsB,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQpB,MAAM,UAASsB,SAAC,aACxBF,EAAAA,EAAAA,KAAA,UAAQpB,MAAM,cAAasB,SAAC,iBAC5BF,EAAAA,EAAAA,KAAA,UAAQpB,MAAM,YAAWsB,SAAC,uBAI9BF,EAAAA,EAAAA,KAACe,EAAAA,GAAG,CAACC,GAAG,IAAGd,UACPC,EAAAA,EAAAA,MAACS,EAAAA,GAAS,CAAAV,SAAA,EACVF,EAAAA,EAAAA,KAACiB,EAAAA,GAAK,CAAAf,SAAC,sBACPF,EAAAA,EAAAA,KAACkB,EAAAA,GAAK,CAACvE,KAAK,OAAOgC,KAAK,mBAAmBwC,aAAcnD,GAAaA,EAAUyD,iBAAkBJ,SAAU9C,aAKhH4B,EAAAA,EAAAA,MAACW,EAAAA,GAAG,CAAAZ,SAAA,EACJF,EAAAA,EAAAA,KAACe,EAAAA,GAAG,CAACC,GAAG,IAAGd,UACPC,EAAAA,EAAAA,MAACS,EAAAA,GAAS,CAAAV,SAAA,EACVF,EAAAA,EAAAA,KAACiB,EAAAA,GAAK,CAAAf,SAAC,uBACHF,EAAAA,EAAAA,KAACkB,EAAAA,GAAK,CAACvE,KAAK,OAAOgC,KAAK,oBAAoBwC,aAAcnD,GAAaA,EAAU0D,kBAAmBL,SAAU9C,UAGtHyB,EAAAA,EAAAA,KAACe,EAAAA,GAAG,CAACC,GAAG,IAAGd,UACPC,EAAAA,EAAAA,MAACS,EAAAA,GAAS,CAAAV,SAAA,EACVF,EAAAA,EAAAA,KAACiB,EAAAA,GAAK,CAAAf,SAAC,qBACPC,EAAAA,EAAAA,MAACe,EAAAA,GAAK,CAACvE,KAAK,SAASgC,KAAK,iBAAiBwC,aAAcnD,GAAaA,EAAU2D,eAAgBN,SAAU9C,EAAW2B,SAAA,EACjHF,EAAAA,EAAAA,KAAA,UAAQpB,MAAM,GAAEsB,SAAC,mBAAsBF,EAAAA,EAAAA,KAAA,UAAQpB,MAAM,UAASsB,SAAC,aAC/DF,EAAAA,EAAAA,KAAA,UAAQwB,SAAS,WAAW5C,MAAM,UAASsB,SAAC,aAC5CF,EAAAA,EAAAA,KAAA,UAAQpB,MAAM,UAASsB,SAAC,aACxBF,EAAAA,EAAAA,KAAA,UAAQpB,MAAM,MAAKsB,SAAC,iBAI5BF,EAAAA,EAAAA,KAACe,EAAAA,GAAG,CAACC,GAAG,IAAGd,UACPC,EAAAA,EAAAA,MAACS,EAAAA,GAAS,CAAAV,SAAA,EACVF,EAAAA,EAAAA,KAACiB,EAAAA,GAAK,CAAAf,SAAC,oBACHF,EAAAA,EAAAA,KAACkB,EAAAA,GAAK,CAACvE,KAAK,OAAOgC,KAAK,WAAWwC,aAAcnD,GAAaA,EAAU4D,SAAUP,SAAU9C,UAGpG4B,EAAAA,EAAAA,MAACY,EAAAA,GAAG,CAACC,GAAG,IAAGd,SAAA,EACXF,EAAAA,EAAAA,KAACiB,EAAAA,GAAK,CAAAf,SAAC,0BAEHC,EAAAA,EAAAA,MAACU,EAAAA,GAAI,CAACgB,QAAM,EAAA3B,SAAA,EACRC,EAAAA,EAAAA,MAAA,OAAK2B,UAAU,+BAA8B5B,SAAA,EAC7CF,EAAAA,EAAAA,KAACkB,EAAAA,GAAK,CACFY,UAAU,mBACVC,GAAG,eACHpF,KAAK,QACLgC,KAAK,uBACLC,MAAM,IACNuC,aAAcnD,GAAaA,EAAUgE,qBAAsBX,SAAU9C,KAEzEyB,EAAAA,EAAAA,KAACiB,EAAAA,GAAK,CAACgB,IAAI,eAAc/B,SAAC,YAE1BC,EAAAA,EAAAA,MAAA,OAAK2B,UAAU,+BAA8B5B,SAAA,EAC7CF,EAAAA,EAAAA,KAACkB,EAAAA,GAAK,CACFY,UAAU,mBACVC,GAAG,eACHpF,KAAK,QACLgC,KAAK,uBACLC,MAAM,IACNuC,aAAcnD,GAAaA,EAAUgE,qBAAsBX,SAAU9C,KAEzEyB,EAAAA,EAAAA,KAACiB,EAAAA,GAAK,CAACgB,IAAI,eAAc/B,SAAC,oBAclCF,EAAAA,EAAAA,KAACc,EAAAA,GAAG,CAAAZ,UACJF,EAAAA,EAAAA,KAACiB,EAAAA,GAAK,CAAAf,SAAC,wBAEPF,EAAAA,EAAAA,KAACkC,EAAAA,OAAM,CACHxC,YAAarB,EACb8D,iBAAiB,oBACjBC,gBAAgB,qCAChBC,oBAAsB7D,IAClBK,EAAiBL,EAAE,uBACnBF,EAAYE,OAGpBwB,EAAAA,EAAAA,KAACc,EAAAA,GAAG,CAAAZ,UACJF,EAAAA,EAAAA,KAACiB,EAAAA,GAAK,CAAAf,SAAC,yBAEPF,EAAAA,EAAAA,KAACkC,EAAAA,OAAM,CACHxC,YAAavB,EACbgE,iBAAiB,oBACjBC,gBAAgB,qCAChBC,oBAAsB7D,IAClBK,EAAiBL,EAAE,mBACnBJ,EAAcI,OAItBwB,EAAAA,EAAAA,KAACc,EAAAA,GAAG,CAAAZ,UACJC,EAAAA,EAAAA,MAAA,OAAK2B,UAAU,4CAA2C5B,SAAA,EACtDF,EAAAA,EAAAA,KAACQ,EAAAA,GAAM,CAAC7D,KAAK,SAAS8D,MAAM,UAAUqB,UAAU,uBAAuBpB,QAtL1E4B,KAEjBC,EAAAA,EAAIC,KAAK,wBAAwBxE,GAChCyE,MAAMC,IACLC,QAAQC,IAAI,aAAaF,EAAIG,KAAKA,OAChCpG,EAAAA,EAAAA,GAAQ,6BAA6B,WACrCqG,OAAOC,SAASC,YACjBC,OAAM,MACLxG,EAAAA,EAAAA,GAAQ,+CAA+C,aA8KsDyD,SAAC,qBAG9FF,EAAAA,EAAAA,KAACQ,EAAAA,GAAM,CAACC,MAAM,YAAYqB,UAAU,cAAcpB,QAASA,KAAK5C,GAAkB,IAASoC,SAAC,gC","sources":["components/Message.js","components/Tender/EditQuoteModal.js"],"sourcesContent":["import {toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst message = (msg,type) => {\r\n    if(type === 'success'){\r\n       return toast.success(msg, {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n            theme: \"colored\",\r\n            });\r\n    } if(type === 'error'){\r\n        return toast.error(msg, {\r\n             position: \"top-right\",\r\n             autoClose: 5000,\r\n             hideProgressBar: false,\r\n             closeOnClick: true,\r\n             pauseOnHover: true,\r\n             draggable: true,\r\n             progress: undefined,\r\n             theme: \"colored\",\r\n             });\r\n     } if(type === 'info'){\r\n        return toast.info(msg, {\r\n             position: \"top-right\",\r\n             autoClose: 5000,\r\n             hideProgressBar: false,\r\n             closeOnClick: true,\r\n             pauseOnHover: true,\r\n             draggable: true,\r\n             progress: undefined,\r\n             theme: \"colored\",\r\n             });\r\n            }if(type === 'warning'){\r\n               return toast.warning(msg, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: \"colored\",\r\n                    });\r\n                   }\r\n            return toast(msg);\r\n   \r\n  \r\n}\r\nexport default message\r\n","import React,{ useState, useEffect } from 'react';\r\nimport { Row,Col,FormGroup,Input,Button,Modal,ModalHeader,ModalBody,Label,Form} from 'reactstrap';\r\nimport { Editor } from 'react-draft-wysiwyg';\r\nimport PropTypes from 'prop-types'\r\n// import message from '../Message';\r\nimport draftToHtml from 'draftjs-to-html';\r\nimport htmlToDraft from 'html-to-draftjs';\r\nimport {EditorState, convertToRaw, ContentState } from 'draft-js';\r\nimport api from '../../constants/api';\r\nimport message from '../Message';\r\n\r\nconst ComponentCard = React.lazy(() => import('../ComponentCard'))\r\n\r\nconst EditQuoteModal = ({editQuoteModal,setEditQuoteModal,existingQuote}) => \r\n\r\n{\r\n    EditQuoteModal.propTypes = {\r\n        editQuoteModal: PropTypes.bool,\r\n        setEditQuoteModal: PropTypes.func,\r\n        existingQuote: PropTypes.object,\r\n      }\r\n\r\n    //   Get Quote Edited Value\r\n    const [quoteData, setQuoteData] = useState(existingQuote);\r\n    const [conditions, setConditions] = useState('')\r\n    const [lineItem, setLineItem] = useState('')\r\n\r\n      const handleData = (e) => {\r\n        setQuoteData({...quoteData, [e.target.name]:e.target.value});\r\n      }\r\n     \r\n    const GetEditQuote = () => {\r\n\r\n        api.post('/tender/edit-TabQuote',quoteData)\r\n        .then((res)=> {\r\n          console.log('edit quote',res.data.data)\r\n            message('Quote Edited Successfully.','success')\r\n            window.location.reload()\r\n        }).catch(()=>{\r\n            message('Unable to edit quote. please fill all fields','error')\r\n        })\r\n    }\r\n\r\n    const handleDataEditor = (e,type) =>{\r\n        \r\n            setQuoteData({...quoteData, [type]:draftToHtml(convertToRaw(e.getCurrentContent()))});\r\n\r\n    }\r\n\r\n    const convertHtmlToDraftcondition = (existingQuoteformal) =>{\r\n        if(existingQuoteformal && existingQuoteformal.quote_condition){\r\n            const contentBlock = htmlToDraft(existingQuoteformal && existingQuoteformal.quote_condition);\r\n            if (contentBlock) {\r\n              const contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\r\n              const editorState = EditorState.createWithContent(contentState);\r\n              setConditions(editorState)\r\n            }\r\n        } \r\n    }\r\n\r\n\r\n    const convertHtmlToDraft = (existingQuoteformal) =>{\r\n        if(existingQuoteformal && existingQuoteformal.intro_drawing_quote){\r\n            const contentBlock = htmlToDraft(existingQuoteformal && existingQuoteformal.intro_drawing_quote);\r\n            if (contentBlock) {\r\n              const contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\r\n              const editorState = EditorState.createWithContent(contentState);\r\n              setLineItem(editorState)\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setQuoteData(existingQuote)\r\n        convertHtmlToDraftcondition(existingQuote)\r\n        convertHtmlToDraft(existingQuote)\r\n    }, [existingQuote])\r\n    \r\n    \r\n  return (\r\n    <>\r\n     {/*  Edit Quote Modal */}\r\n     <Modal size=\"lg\" isOpen={editQuoteModal}>\r\n        <ModalHeader>Edit Quote \r\n        <Button color=\"secondary\" onClick={()=>{setEditQuoteModal(false) }}>X</Button>\r\n        </ModalHeader>\r\n        <ModalBody>\r\n            <FormGroup>\r\n                <Form>\r\n                    <FormGroup>\r\n                    <ComponentCard >\r\n                        <Row>\r\n                        <Col md=\"3\">\r\n                            <FormGroup>\r\n                            <Label>Quote Date</Label>\r\n                            <Input type=\"date\" name=\"quote_date\" defaultValue={quoteData && quoteData.quote_date} onChange={handleData}/>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md=\"3\">\r\n                            <FormGroup>\r\n                            <Label>Quote Code</Label>\r\n                            <Input type=\"text\" name='quote_code' defaultValue={quoteData && quoteData.quote_code} onChange={handleData}/>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md=\"3\">\r\n                            <FormGroup>\r\n                            <Label>Quote Status</Label>\r\n                            <Input type=\"select\" name=\"quote_status\" defaultValue={quoteData && quoteData.quote_status} onChange={handleData}>\r\n                            <option selected=\"selected\" value=\"New\">New</option>\r\n                            <option value=\"Quoted\">Quoted</option>\r\n                            <option value=\"Awarded\">Awarded</option>\r\n                            <option value=\"Not Awarded\">Not Awarded</option>\r\n                            <option value=\"Cancelled\">Cancelled</option>\r\n                            </Input>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md=\"3\">\r\n                            <FormGroup>\r\n                            <Label>Project Location</Label>\r\n                            <Input type=\"text\" name=\"project_location\" defaultValue={quoteData && quoteData.project_location} onChange={handleData}/>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        </Row>\r\n                        \r\n                        <Row>\r\n                        <Col md=\"3\">\r\n                            <FormGroup>\r\n                            <Label>Project Reference</Label>\r\n                                <Input type=\"text\" name=\"project_reference\" defaultValue={quoteData && quoteData.project_reference} onChange={handleData}/>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md=\"3\">\r\n                            <FormGroup>\r\n                            <Label>Mode of Payment</Label>\r\n                            <Input type=\"select\" name=\"payment_method\" defaultValue={quoteData && quoteData.payment_method} onChange={handleData}>\r\n                                <option value=\"\">Please Select</option><option value=\"15 days\">15 days</option>\r\n                                <option selected=\"selected\" value=\"30 days\">30 days</option>\r\n                                <option value=\"60 days\">60 days</option>\r\n                                <option value=\"COD\">COD</option>\r\n                            </Input>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md=\"3\">\r\n                            <FormGroup>\r\n                            <Label>Quote Revision</Label>\r\n                                <Input type=\"text\" name=\"revision\" defaultValue={quoteData && quoteData.revision} onChange={handleData}/>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md=\"3\">\r\n                        <Label>Show Project Manager</Label>\r\n\r\n                            <Form inline>\r\n                                <div className=\"form-check form-check-inline\">\r\n                                <Input\r\n                                    className=\"form-check-input\"\r\n                                    id=\"inlineradio1\"\r\n                                    type=\"radio\"\r\n                                    name=\"show_project_manager\"\r\n                                    value=\"1\"\r\n                                    defaultValue={quoteData && quoteData.show_project_manager} onChange={handleData}\r\n                                />\r\n                                <Label for=\"inlineradio1\">yes</Label>\r\n                                </div>\r\n                                <div className=\"form-check form-check-inline\">\r\n                                <Input\r\n                                    className=\"form-check-input\"\r\n                                    id=\"inlineradio2\"\r\n                                    type=\"radio\"\r\n                                    name=\"show_project_manager\"\r\n                                    value=\"0\"\r\n                                    defaultValue={quoteData && quoteData.show_project_manager} onChange={handleData}\r\n                                />\r\n                                <Label for=\"inlineradio2\">No</Label>\r\n                                </div>\r\n                            </Form>\r\n{/* <FormGroup check>\r\n<Input name=\"show_project_manager\" type=\"radio\" value=\"1\" defaultValue={quoteData && quoteData.show_project_manager} onChange={handleData}/>{' '}\r\n<Label check>Yes</Label>\r\n</FormGroup>\r\n<FormGroup check>\r\n    <Input name=\"show_project_manager\" type=\"radio\" value=\"0\" defaultValue={quoteData && quoteData.show_project_manager} onChange={handleData}/>{' '}\r\n    <Label check> No </Label>\r\n</FormGroup> */}\r\n\r\n                        </Col>\r\n                        </Row>\r\n                        <Row>\r\n                        <Label>Intro Line Items</Label>\r\n                        </Row>\r\n                        <Editor\r\n                            editorState={lineItem}\r\n                            wrapperClassName=\"demo-wrapper mb-0\"\r\n                            editorClassName=\"demo-editor border mb-4 edi-height\"\r\n                            onEditorStateChange={(e)=>{\r\n                                handleDataEditor(e,'intro_drawing_quote')\r\n                                setLineItem(e)\r\n                            }}\r\n                        />\r\n                        <Row>\r\n                        <Label>Terms & Condition</Label>\r\n                        </Row>\r\n                        <Editor\r\n                            editorState={conditions}\r\n                            wrapperClassName=\"demo-wrapper mb-0\"\r\n                            editorClassName=\"demo-editor border mb-4 edi-height\"\r\n                            onEditorStateChange={(e)=>{\r\n                                handleDataEditor(e,'quote_condition')\r\n                                setConditions(e)\r\n                            }}\r\n                        />\r\n\r\n                        <Row>\r\n                        <div className=\"pt-3 mt-3 d-flex align-items-center gap-2\">\r\n                            <Button type=\"button\" color='primary' className=\"btn shadow-none mr-2\" onClick={GetEditQuote}>\r\n                            Save & Continue\r\n                            </Button>\r\n                            <Button color=\"secondary\" className='shadow-none' onClick={()=>{setEditQuoteModal(false) }}>Cancel</Button>\r\n                        </div>\r\n                        </Row>\r\n\r\n                    </ComponentCard>\r\n                    </FormGroup> \r\n                </Form>\r\n            </FormGroup>\r\n        </ModalBody>\r\n    </Modal>\r\n    {/* END Edit Quote Modal */}\r\n\r\n</>\r\n  )\r\n}\r\n\r\nexport default EditQuoteModal\r\n"],"names":["message","msg","type","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","error","info","warning","ComponentCard","React","_ref","editQuoteModal","setEditQuoteModal","existingQuote","quoteData","setQuoteData","useState","conditions","setConditions","lineItem","setLineItem","handleData","e","_objectSpread","target","name","value","handleDataEditor","draftToHtml","convertToRaw","getCurrentContent","useEffect","existingQuoteformal","quote_condition","contentBlock","htmlToDraft","contentState","ContentState","createFromBlockArray","contentBlocks","editorState","EditorState","createWithContent","convertHtmlToDraftcondition","intro_drawing_quote","convertHtmlToDraft","_jsx","_Fragment","children","_jsxs","Modal","size","isOpen","ModalHeader","Button","color","onClick","ModalBody","FormGroup","Form","Row","Col","md","Label","Input","defaultValue","quote_date","onChange","quote_code","quote_status","selected","project_location","project_reference","payment_method","revision","inline","className","id","show_project_manager","for","Editor","wrapperClassName","editorClassName","onEditorStateChange","GetEditQuote","api","post","then","res","console","log","data","window","location","reload","catch"],"sourceRoot":""}