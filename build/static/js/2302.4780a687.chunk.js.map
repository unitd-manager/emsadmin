{"version":3,"file":"static/js/2302.4780a687.chunk.js","mappings":"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","sources":["views/EditData/BroadCastsEdit.js","components/Tab.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Button,\r\n  Col,\r\n  Form,\r\n  FormGroup,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  Modal,\r\n  ModalBody,\r\n  CardBody,\r\n  Label,\r\n  Input,\r\n  Row,\r\n  TabContent,\r\n  TabPane,\r\n  Card,\r\n} from 'reactstrap';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport * as Icon from 'react-feather';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport message from '../../components/Message';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport api from '../../constants/api';\r\nimport Tab from '../../components/Tab';\r\nimport CategoryButton from '../../components/CategoryTable/CategoryButton';\r\nimport CategoryDetailComp from '../../components/CategoryTable/CategoryDetailComp';\r\nimport ViewFileComponentV2 from '../../components/ProjectModal/ViewFileComponentV2';\r\nimport AttachmentModalV2 from '../../components/Tender/AttachmentModalV2';\r\nimport ComponentCard from '../../components/ComponentCard';\r\n\r\nconst BroadCastsEdit = () => {\r\n  const [insertTimeSheet, setInsertTimesheet] = useState({\r\n    broadcast_id: '',\r\n    city: '',\r\n  });\r\n  const [categoryDetails, setbroadcast] = useState();\r\n  const [activeTab, setActiveTab] = useState('1');\r\n  const [attachmentModal, setAttachmentModal] = useState(false);\r\n  const [RoomName, setRoomName] = useState('');\r\n  const [fileTypes, setFileTypes] = useState('');\r\n  const [pictureData, setDataForPicture] = useState({\r\n    modelType: '',\r\n  });\r\n  const [pictureupdate, setPictureUpdate] = useState(false);\r\n  // Change state for task selection to store an array of selected tasks\r\n  // Button Save Apply Back List\r\n  const applyChanges = () => {};\r\n  const navigate = useNavigate();\r\n  const saveChanges = () => {\r\n    if (categoryDetails.category_title !== '') {\r\n      navigate('/BroadCast');\r\n    }\r\n  };\r\n  const dataForPicture = () => {\r\n    setDataForPicture({\r\n      modelType: 'picture',\r\n    });\r\n  };\r\n  const backToList = () => {\r\n    navigate('/BroadCast');\r\n  };\r\n  const toggle = (tab) => {\r\n    if (activeTab !== tab) setActiveTab(tab);\r\n  };\r\n  const tabs = [\r\n    { id: '1', name: 'Attachment' },\r\n    { id: '2', name: 'BroadCast List' },\r\n  ];\r\n\r\n  //get staff details\r\n  const [addContactModalss, setAddContactModalss] = useState(false);\r\n  const [taskdetail, setTaskDetail] = useState([]);\r\n  const [selectedTasks, setSelectedTasks] = useState([]);\r\n  \r\n  const [milestones, setMilestones] = useState([]);\r\n  //const [employeeTime, setEmployee] = useState();\r\n  const addContactToggless = () => {\r\n    setAddContactModalss(!addContactModalss);\r\n  };\r\n  // Gettind data from Job By Id\r\n  const editJobById = () => {\r\n    api\r\n      .get('/valuelist/getCountryValuelist')\r\n      .then((res) => {\r\n        console.log(res.data.data);\r\n        //setEmployee(res.data.data);\r\n      })\r\n      .catch(() => {});\r\n  };\r\n  const { id } = useParams();\r\n\r\n  const handleInputs = (e) => {\r\n    setbroadcast({ ...categoryDetails, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  //Milestone data in milestoneDetails\r\n  const handleInputsTime = (e) => {\r\n    setInsertTimesheet({ ...insertTimeSheet, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  // const inserttimeSheets = () => {\r\n  //   insertTimeSheet.broadcast_id = id;\r\n\r\n  //   api.post('/content/insertBroadcastConntact', insertTimeSheet)\r\n  //   .then(() => {\r\n  //     message('country inserted successfully.', 'success');\r\n\r\n  //   });\r\n  // };\r\n\r\n  const inserttimeSheets = async () => {\r\n    try {\r\n      if (selectedTasks.length === 0) {\r\n        message('Please select at least one task.', 'warning');\r\n        return;\r\n      }\r\n\r\n      const contactResponse = await api.post('/contact/getContactByCountrycities', {\r\n        country: insertTimeSheet.country,\r\n        city: selectedTasks.join(','), // Join selected cities into a comma-separated string\r\n      });\r\n\r\n      if (contactResponse?.data?.data && contactResponse.data.data.length > 0) {\r\n        contactResponse.data.data.forEach(async (contact) => {\r\n          const newContactWithCompany = {\r\n            ...insertTimeSheet,\r\n            contact_id: contact.contact_id,\r\n            city: selectedTasks,\r\n          };\r\n          newContactWithCompany.broadcast_id = id;\r\n\r\n          const response = await api.post(\r\n            '/content/insertBroadcastConntact',\r\n            newContactWithCompany,\r\n          );\r\n\r\n          if (response.data.success) {\r\n            const insertedDataId = response.data.data.insertId;\r\n            console.log(`Inserted data for contact_id ${contact.contact_id}: ${insertedDataId}`);\r\n          } else {\r\n            console.error(`Error inserting data for contact_id ${contact.contact_id}`);\r\n            message('Network connection error.', 'error');\r\n          }\r\n        });\r\n\r\n        message('Contacts inserted successfully.', 'success');\r\n        setSelectedTasks([]);\r\n      } else {\r\n        console.error('No contact records found for the selected country and city.');\r\n        message('No contact records found for the selected country and city.', 'error');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error inserting time sheets:', error);\r\n      message('Error inserting time sheets.', 'error');\r\n    }\r\n  };\r\n\r\n  // Get Category By Id\r\n  const CategoryById = () => {\r\n    api\r\n      .post('/content/getBroadCastById', { broadcast_id: id })\r\n      .then((res) => {\r\n        setbroadcast(res.data.data[0]);\r\n      })\r\n      .catch(() => {\r\n        message('category Data Not Found', 'info');\r\n      });\r\n  };\r\n\r\n\r\n  const getMilestoneName = () => {\r\n    api\r\n      .get('/valuelist/getCountryValuelist')\r\n      .then((res) => {\r\n        setMilestones(res.data.data);\r\n      })\r\n      .catch(() => {\r\n        message('Milestone not found', 'info');\r\n      });\r\n  };\r\n\r\n  // Api call for getting milestone dropdown based on project ID\r\n  const getTaskName = () => {\r\n    api\r\n      .get('/valuelist/getCitiesvalue')\r\n      .then((res) => {\r\n        setTaskDetail(res.data.data);\r\n      })\r\n      .catch(() => {\r\n        message('Task not found', 'info');\r\n      });\r\n  };\r\n  // ... (other JSX code)\r\n \r\n\r\n  const editCategoryData = () => {\r\n    if (categoryDetails.title !== '') {\r\n      api\r\n        .post('/content/editBroadCast', categoryDetails)\r\n        .then(() => {\r\n          message('Record editted successfully', 'success');\r\n        })\r\n        .catch(() => {\r\n          message('Unable to edit record.', 'error');\r\n        });\r\n    } else {\r\n      message('Please fill all required fields', 'warning');\r\n    }\r\n  };\r\n \r\n \r\n\r\n  // const handleFilterChange = (selectedCountry) => {\r\n  //   // Update the filtered contacts based on the selected country\r\n  //   setFilteredContacts(country.filter((contact) => contact.country === selectedCountry));\r\n  // };\r\n  const [filteredContacts, setFilteredContacts] = useState([]);\r\n  const [country, setCountry] = useState([]);\r\n\r\n  const getContactcountryName = () => {\r\n    api\r\n      .post('/content/getBroadCastcountryById', { broadcast_id: id })\r\n      .then((res) => {\r\n        setCountry(res.data.data);\r\n        // Set filtered contacts initially with all contacts\r\n        //setFilteredContacts(res.data.data);\r\n      })\r\n      .catch(() => {\r\n        message('Milestone not found', 'info');\r\n      });\r\n  };\r\n  console.log(\"\",categoryDetails)\r\n  const handleFilterChange = (selectedCountry) => {\r\n    // Update the filtered contacts based on the selected country\r\n    if (selectedCountry === 'selected') {\r\n      setFilteredContacts(country); // Show all contacts when \"Please Select\" is chosen\r\n    } else {\r\n      setFilteredContacts(country.filter((contact) => contact.country === selectedCountry));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    editJobById();\r\n    getContactcountryName();\r\n  }, [id]);\r\n\r\n  useEffect(() => {\r\n    getMilestoneName();\r\n    CategoryById();\r\n    getTaskName();\r\n    //getCityName();\r\n  }, [id]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"MainDiv\">\r\n        <div className=\" pt-xs-25\">\r\n          <br />\r\n          {/* Button */}\r\n          <CategoryButton\r\n            editCategoryData={editCategoryData}\r\n            navigate={navigate}\r\n            applyChanges={applyChanges}\r\n            saveChanges={saveChanges}\r\n            backToList={backToList}\r\n            id={id}\r\n          ></CategoryButton>\r\n\r\n          {/* More details*/}\r\n          <CategoryDetailComp\r\n            categoryDetails={categoryDetails}\r\n            handleInputs={handleInputs}\r\n          ></CategoryDetailComp>\r\n          <ComponentCard title=\"More Details\">\r\n            <ToastContainer></ToastContainer>\r\n            <Tab toggle={toggle} tabs={tabs} />\r\n            <TabContent className=\"p-4\" activeTab={activeTab}>\r\n              <TabPane tabId=\"1\">\r\n                <Form>\r\n                  <FormGroup>\r\n                    <Row>\r\n                      <Col xs=\"12\" md=\"3\" className=\"mb-3\">\r\n                        <Button\r\n                          className=\"shadow-none\"\r\n                          color=\"primary\"\r\n                          onClick={() => {\r\n                            setRoomName('Category');\r\n                            setFileTypes(['JPG', 'JPEG', 'PNG', 'GIF', 'OGG', 'MP3', 'WAV', 'M4A']);\r\n                            dataForPicture();\r\n                            setAttachmentModal(true);\r\n                          }}\r\n                        >\r\n                          <Icon.Image className=\"rounded-circle\" width=\"20\" />\r\n                        </Button>\r\n                      </Col>\r\n                    </Row>\r\n                    <AttachmentModalV2\r\n                      moduleId={id}\r\n                      attachmentModal={attachmentModal}\r\n                      setAttachmentModal={setAttachmentModal}\r\n                      roomName={RoomName}\r\n                      fileTypes={fileTypes}\r\n                      altTagData=\"Category Data\"\r\n                      desc=\"Category Data\"\r\n                      recordType=\"Picture\"\r\n                      mediaType={pictureData.modelType}\r\n                      update={pictureupdate}\r\n                      setUpdate={setPictureUpdate}\r\n                    />\r\n                    <ViewFileComponentV2\r\n                      moduleId={id}\r\n                      roomName=\"Category\"\r\n                      recordType=\"Picture\"\r\n                      update={pictureupdate}\r\n                      setUpdate={setPictureUpdate}\r\n                    />\r\n                  </FormGroup>\r\n                </Form>\r\n              </TabPane>\r\n              <TabPane tabId=\"2\">\r\n                <Form>\r\n                  <FormGroup>\r\n                    <Button\r\n                      color=\"primary\"\r\n                      className=\"shadow-none\"\r\n                      onClick={addContactToggless.bind(null)}\r\n                    >\r\n                      Add New{' '}\r\n                    </Button>\r\n                    <Modal\r\n                      size=\"lg\"\r\n                      isOpen={addContactModalss}\r\n                      toggle={addContactToggless.bind(null)}\r\n                    >\r\n                      <ModalHeader toggle={addContactToggless.bind(null)}>New Task</ModalHeader>\r\n                      <ModalBody>\r\n                        <Row>\r\n                          <Col md=\"12\">\r\n                            <Card>\r\n                              <CardBody>\r\n                                <Form>\r\n                                  <Row>\r\n                                    <Col md=\"4\">\r\n                                      <Label>Country</Label>\r\n                                      <FormGroup>\r\n                                        <Input\r\n                                          type=\"select\"\r\n                                          onChange={(e) => {\r\n                                            handleInputsTime(e);\r\n                                          }}\r\n                                          value={insertTimeSheet && insertTimeSheet.country}\r\n                                          name=\"country\"\r\n                                        >\r\n                                          <option value=\"selected\">Please Select</option>\r\n                                          {milestones &&\r\n                                            milestones.map((e) => {\r\n                                              return (\r\n                                                <option key={e.key_text} value={e.value}>\r\n                                                  {' '}\r\n                                                  {e.value}{' '}\r\n                                                </option>\r\n                                              );\r\n                                            })}\r\n                                        </Input>\r\n                                      </FormGroup>\r\n                                    </Col>\r\n                                    {insertTimeSheet.country &&\r\n                                      insertTimeSheet.country !== 'selected' && ( // Render cities only if a country is selected\r\n                                        <Col md=\"4\">\r\n                                          <FormGroup>\r\n                                            <Label>cities</Label>\r\n\r\n                                            {taskdetail &&\r\n                                              taskdetail.map((e) => (\r\n                                                <FormGroup check key={e.value}>\r\n                                                  <Label check>\r\n                                                    <Input\r\n                                                      type=\"checkbox\"\r\n                                                      value={e.value}\r\n                                                      // value={insertTimeSheet && insertTimeSheet.city}\r\n                                                      // name=\"city\"\r\n                                                      checked={selectedTasks.includes(e.citi_value)}\r\n                                                      onChange={(event) => {\r\n                                                        const selectedTask = e.citi_value;\r\n                                                        if (event.target.checked) {\r\n                                                          setSelectedTasks([\r\n                                                            ...selectedTasks,\r\n                                                            selectedTask,\r\n                                                          ]);\r\n                                                        } else {\r\n                                                          setSelectedTasks(\r\n                                                            selectedTasks.filter(\r\n                                                              (task) => task !== selectedTask,\r\n                                                            ),\r\n                                                          );\r\n                                                        }\r\n                                                      }}\r\n                                                    />\r\n                                                    {e.citi_value}\r\n                                                  </Label>\r\n                                                </FormGroup>\r\n                                              ))}\r\n                                          </FormGroup>\r\n                                        </Col>\r\n                                      )}\r\n                                  </Row>\r\n                                </Form>\r\n                              </CardBody>\r\n                            </Card>\r\n                          </Col>\r\n                        </Row>\r\n                      </ModalBody>\r\n                      <ModalFooter>\r\n                        <Button\r\n                          className=\"shadow-none\"\r\n                          color=\"primary\"\r\n                          onClick={() => {\r\n                            inserttimeSheets();\r\n                          }}\r\n                        >\r\n                          Submit\r\n                        </Button>\r\n                        <Button\r\n                          color=\"secondary\"\r\n                          className=\"shadow-none\"\r\n                          onClick={addContactToggless.bind(null)}\r\n                        >\r\n                          Cancel\r\n                        </Button>\r\n                      </ModalFooter>\r\n                    </Modal>\r\n                  </FormGroup>\r\n                </Form>\r\n                <ComponentCard title=\"Summary\">\r\n                  <Col md=\"2\">\r\n                    <FormGroup>\r\n                      <Label>country</Label>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"country\"\r\n                        onChange={(e) => {\r\n                          handleFilterChange(e.target.value);\r\n                        }}\r\n                      >\r\n                        <option value=\"\">Please Select</option>\r\n                        {milestones &&\r\n                          milestones.map((e) => {\r\n                            return (\r\n                              <option key={e.key_text} value={e.value}>\r\n                                {' '}\r\n                                {e.value}{' '}\r\n                              </option>\r\n                            );\r\n                          })}\r\n                      </Input>\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <br />\r\n                  <Row>\r\n                    <Col>\r\n                      <FormGroup>\r\n                        <Label>First Name</Label>\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col>\r\n                      <FormGroup>\r\n                        <Label>Country</Label>\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col>\r\n                      <FormGroup>\r\n                        <Label>city</Label>\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n                  {filteredContacts.map((contact) => (\r\n                    <Row key={contact.contact_id}>\r\n                      <Col>\r\n                        <FormGroup>{contact && contact.first_name}</FormGroup>\r\n                      </Col>\r\n                      <Col>\r\n                        <FormGroup>{contact && contact.country}</FormGroup>\r\n                      </Col>\r\n                      <Col>\r\n                        <FormGroup>{contact && contact.city}</FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                  ))}\r\n                </ComponentCard>\r\n              </TabPane>\r\n            </TabContent>\r\n          </ComponentCard>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default BroadCastsEdit;\r\n","import React,{useEffect} from 'react';\r\nimport { Nav, NavItem, NavLink } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\nimport { useSearchParams } from 'react-router-dom';\r\n\r\nexport default function Tab({ toggle,tabs }) {\r\n  Tab.propTypes = {\r\n    toggle: PropTypes.func,\r\n    tabs: PropTypes.array\r\n  };\r\n\r\n  // for tab refresh navigation #Renuka 31-05-23\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n  useEffect(() => {\r\n   toggle(searchParams.get('tab'))\r\n  }, [searchParams.get('tab')]);\r\n  // End for tab refresh navigation #Renuka 31-05-23\r\n  return (\r\n    <Nav tabs>\r\n\r\n      {tabs?.map((e)=>{\r\n        return (\r\n          <NavItem key={e.id}>\r\n            <NavLink\r\n            key={e.id}\r\n              className={e.id === searchParams.get('tab') ? 'active' : ''}\r\n              onClick={() => {\r\n                setSearchParams({tab:e.id});\r\n                toggle(e.id);\r\n              }}\r\n            >\r\n              {e.name}\r\n            </NavLink>\r\n          </NavItem>\r\n        )\r\n      })}\r\n    </Nav>\r\n  );\r\n}\r\n"],"names":["BroadCastsEdit","insertTimeSheet","setInsertTimesheet","useState","broadcast_id","city","categoryDetails","setbroadcast","activeTab","setActiveTab","attachmentModal","setAttachmentModal","RoomName","setRoomName","fileTypes","setFileTypes","pictureData","setDataForPicture","modelType","pictureupdate","setPictureUpdate","navigate","useNavigate","addContactModalss","setAddContactModalss","taskdetail","setTaskDetail","selectedTasks","setSelectedTasks","milestones","setMilestones","addContactToggless","id","useParams","filteredContacts","setFilteredContacts","country","setCountry","console","log","useEffect","api","get","then","res","data","catch","post","message","_jsx","_Fragment","children","className","_jsxs","CategoryButton","editCategoryData","title","applyChanges","saveChanges","category_title","backToList","CategoryDetailComp","handleInputs","e","_objectSpread","target","name","value","ComponentCard","ToastContainer","Tab","toggle","tab","tabs","TabContent","TabPane","tabId","Form","FormGroup","Row","Col","xs","md","Button","color","onClick","Icon","width","AttachmentModalV2","moduleId","roomName","altTagData","desc","recordType","mediaType","update","setUpdate","ViewFileComponentV2","bind","Modal","size","isOpen","ModalHeader","ModalBody","Card","CardBody","Label","Input","type","onChange","handleInputsTime","map","key_text","check","checked","includes","citi_value","event","selectedTask","filter","task","ModalFooter","async","_contactResponse$data","length","contactResponse","join","forEach","newContactWithCompany","contact_id","contact","response","success","insertedDataId","insertId","concat","error","inserttimeSheets","selectedCountry","first_name","_ref","searchParams","setSearchParams","useSearchParams","Nav","NavItem","NavLink"],"sourceRoot":""}